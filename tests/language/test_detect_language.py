import os
import unittest
from kedehub.language.detect_language import detect_language, _ext_lang


class KedeGitLanguageTestCase(unittest.TestCase):

    def test_ext_lang_map_built(self):
        # Just some extensions to ensure the ext to lang map was populated
        extensions = ['js', 'go', 'py', 'html']
        for ext in extensions:
            assert ext in _ext_lang


    def test_languages_recognised(self):
        # In case of Docker environment
        pwd = os.getcwd()
        if pwd == "/":
            pwd = "/app"
        self.assertTrue(detect_language("/tmp/Dockerfile") == "Dockerfile")
        self.assertTrue(detect_language("/tmp/some_file.bsl") == "1C Enterprise")
        self.assertTrue(detect_language("/tmp/some_file.os") == "1C Enterprise")
        self.assertTrue(detect_language("/tmp/some_file.cls") == "Apex")
        self.assertTrue(detect_language("/tmp/some_file.asm") == "Assembly")
        self.assertTrue(detect_language("/tmp/some_file.bat") == "Batchfile")
        self.assertTrue(detect_language("/tmp/some_file.cmd") == "Batchfile")
        self.assertTrue(detect_language("/tmp/some_file.btm") == "Batchfile")
        self.assertTrue(detect_language("/tmp/some_file.c") == "C")
        self.assertTrue(detect_language("/tmp/some_file.h") == "C")
        self.assertTrue(detect_language("/tmp/some_file.cpp") == "C++")
        self.assertTrue(detect_language("/tmp/some_file.cxx") == "C++")
        self.assertTrue(detect_language("/tmp/some_file.hpp") == "C++")
        self.assertTrue(detect_language("/tmp/some_file.cc") == "C++")
        self.assertTrue(detect_language("/tmp/some_file.hxx") == "C++")
        self.assertTrue(detect_language("/tmp/some_file.hh") == "C++")
        self.assertTrue(detect_language("/tmp/some_file.cs") == "C#")
        self.assertTrue(detect_language("/tmp/some_file.clj") == "Clojure")
        self.assertTrue(detect_language(
            "/tmp/some_file.coffee") == "CoffeeScript")
        self.assertTrue(detect_language("/tmp/some_file.cbl") == "COBOL")
        self.assertTrue(detect_language("/tmp/some_file.COB") == "COBOL")
        self.assertTrue(detect_language("/tmp/some_file.cpy") == "COBOL")
        self.assertTrue(detect_language("/tmp/some_file.dart") == "Dart")
        self.assertTrue(detect_language("/tmp/some_file.groovy") == "Groovy")
        self.assertTrue(detect_language("/tmp/some_file.gsh") == "Groovy")
        self.assertTrue(detect_language("/tmp/some_file.gvy") == "Groovy")
        self.assertTrue(detect_language("/tmp/some_file.Ejs") == "EJS")
        self.assertTrue(detect_language("/tmp/some_file.ex") == "Elixir")
        self.assertTrue(detect_language("/tmp/some_file.exs") == "Elixir")
        self.assertTrue(detect_language("/tmp/some_file.elm") == "Elm")
        self.assertTrue(detect_language("/tmp/some_file.erb") == "ERB")
        self.assertTrue(detect_language("/tmp/some_file.html.erb") == "ERB")
        self.assertTrue(detect_language("/tmp/some_file.erl") == "Erlang")
        self.assertTrue(detect_language("/tmp/some_file.hrl") == "Erlang")
        self.assertTrue(detect_language("/tmp/some_file.fs") == "F#")
        self.assertTrue(detect_language("/tmp/some_file.fsi") == "F#")
        self.assertTrue(detect_language("/tmp/some_file.fsx") == "F#")
        self.assertTrue(detect_language("/tmp/some_file.fsscript") == "F#")
        self.assertTrue(detect_language("/tmp/some_file.f90") == "Fortran")
        self.assertTrue(detect_language("/tmp/some_file.F90") == "Fortran")
        self.assertTrue(detect_language("/tmp/some_file.f95") == "Fortran")
        self.assertTrue(detect_language("/tmp/some_file.f03") == "Fortran")
        self.assertTrue(detect_language("/tmp/some_file.for") == "Fortran")
        self.assertTrue(detect_language("/tmp/some_file.go") == "Go")
        self.assertTrue(detect_language("/tmp/some_file.lhs") == "Haskell")
        self.assertTrue(detect_language("/tmp/some_file.hs") == "Haskell")
        self.assertTrue(detect_language("/tmp/some_file.hcl") == "HCL")
        self.assertTrue(detect_language("/tmp/some_file.tf") == "HCL")
        self.assertTrue(detect_language("/tmp/some_file.tfvars") == "HCL")
        self.assertTrue(detect_language("/tmp/some_file.html") == "HTML")
        self.assertTrue(detect_language("/tmp/some_file.htm") == "HTML")
        self.assertTrue(detect_language("/tmp/some_file.xhtml") == "HTML")
        self.assertTrue(detect_language("/tmp/some_file.json") == "JSON")
        self.assertTrue(detect_language("/tmp/some_file.java") == "Java")
        self.assertTrue(detect_language("/tmp/some_file.js") == "JavaScript")
        self.assertTrue(detect_language("/tmp/some_file.mjs") == "JavaScript")
        self.assertTrue(detect_language("/tmp/some_file.cjs") == "JavaScript")
        self.assertTrue(detect_language(
            "/tmp/some_file.jsx") == "JavaScript")
        self.assertTrue(detect_language(
            "/tmp/some_file.ipynb") == "Jupyter Notebook")
        self.assertTrue(detect_language("/tmp/some_file.kv") == "Kivy")
        self.assertTrue(detect_language("/tmp/some_file.kt") == "Kotlin")
        self.assertTrue(detect_language("/tmp/some_file.kts") == "Kotlin")
        self.assertTrue(detect_language("/tmp/some_file.l") == "Lex")
        self.assertTrue(detect_language("/tmp/some_file.liquid") == "Liquid")
        self.assertTrue(detect_language("/tmp/some_file.lua") == "Lua")
        # self.assertTrue(detect_language(pwd + "/test/fixtures/matlab.m") == "MATLAB"
        self.assertTrue(detect_language("/tmp/some_file.nix") == "Nix")
        self.assertTrue(detect_language(pwd + "/test/fixtures/objective-c.m") == "Objective-C")

        self.assertTrue(detect_language(
            "/tmp/some_file.mm") == "Objective-C")
        self.assertTrue(detect_language("/tmp/some_file.p") == "OpenEdge ABL")
        self.assertTrue(detect_language("/tmp/some_file.w") == "OpenEdge ABL")
        self.assertTrue(detect_language("/tmp/some_file.i") == "OpenEdge ABL")
        self.assertTrue(detect_language("/tmp/some_file.ab") == "OpenEdge ABL")
        self.assertTrue(detect_language("/tmp/some_file.pkb") == "PLSQL")
        self.assertTrue(detect_language("/tmp/some_file.pks") == "PLSQL")
        self.assertTrue(detect_language("/tmp/some_file.pl") == "Perl")
        self.assertTrue(detect_language("/tmp/some_file.pm") == "Perl")
        self.assertTrue(detect_language("/tmp/some_file.t") == "Perl")
        self.assertTrue(detect_language("/tmp/some_file.php") == "PHP")
        self.assertTrue(detect_language(
            "/tmp/some_file.proto") == "Protocol Buffer")
        self.assertTrue(detect_language("/tmp/some_file.pks") == "PLSQL")
        self.assertTrue(detect_language("/tmp/some_file.pkb") == "PLSQL")
        self.assertTrue(detect_language("/tmp/some_file.pp") == "Puppet")
        self.assertTrue(detect_language("/tmp/some_file.py") == "Python")
        self.assertTrue(detect_language("/tmp/some_file.qml") == "QML")
        self.assertTrue(detect_language("/tmp/some_file.r") == "R")
        self.assertTrue(detect_language("/tmp/some_file.robot") == "Robot")
        self.assertTrue(detect_language("/tmp/some_file.rb") == "Ruby")
        self.assertTrue(detect_language("/tmp/some_file.rs") == "Rust")
        self.assertTrue(detect_language("/tmp/some_file.scala") == "Scala")
        self.assertTrue(detect_language("/tmp/some_file.scss") == "SCSS")
        self.assertTrue(detect_language("/tmp/some_file.sh") == "Shell")
        self.assertTrue(detect_language("/tmp/some_file.st") == "Smalltalk")
        self.assertTrue(detect_language("/tmp/some_file.styl") == "Stylus")
        self.assertTrue(detect_language("/tmp/some_file.svelte") == "Svelte")
        self.assertTrue(detect_language("/tmp/some_file.swift") == "Swift")
        self.assertTrue(detect_language("/tmp/some_file.ts") == "TypeScript")
        self.assertTrue(detect_language(
            "/tmp/some_file.tsx") == "TypeScript")
        self.assertTrue(detect_language("/tmp/some_file.vue") == "Vue")
        self.assertTrue(detect_language("/tmp/some_file.xtend") == "Xtend")
        self.assertTrue(detect_language("/tmp/some_file.xtext") == "Xtext")
        self.assertTrue(detect_language("/tmp/some_file.y") == "Yacc")
        self.assertTrue(detect_language("/main/resources/application.properties") == "Configuration")
        self.assertTrue(detect_language("/main/resources/application.yaml") == "Configuration")
        self.assertTrue(detect_language("/main/resources/application.yml") == "Configuration")
        self.assertTrue(detect_language("/tmp/some_file.tcl") == "Tcl")
        self.assertTrue(detect_language("/tmp/some_file.tbc") == "Tcl")
        self.assertTrue(detect_language("/tmp/some_file.tk") == "Tcl")
        self.assertTrue(detect_language("/tmp/some_file.m4") == "M4")
        self.assertTrue(detect_language("/tmp/some_file.cmake") == "CMake")
        self.assertTrue(detect_language("/tmp/Makefile") == "Makefile")
        self.assertTrue(detect_language("/tmp/some_file.awk") == "Awk")
        self.assertTrue(detect_language("/tmp/some_file.ps1") == "PowerShell")
        self.assertTrue(detect_language("/tmp/some_file.md") == "Markdown")
        self.assertTrue(detect_language("/tmp/some_file.rst") == "reStructuredText")
        self.assertTrue(detect_language("/tmp/some_file.ir") == "LLVM")
        self.assertTrue(detect_language("/tmp/some_file.ll") == "LLVM")
        self.assertTrue(detect_language("/tmp/some_file.cu") == "CUDA")
        self.assertTrue(detect_language("/tmp/some_file.cuh") == "CUDA")
        self.assertTrue(detect_language("/tmp/some_file") == "Other")
        self.assertTrue(detect_language("/tmp/some_file.bzl") == "Starlark")
        self.assertTrue(detect_language("/tmp/some_file.mlir") == "MLIR")
        self.assertTrue(detect_language("/tmp/some_file.com") == "DIGITAL Command Language")
        self.assertTrue(detect_language("/tmp/some_file.ftl") == "FreeMarker")
        self.assertTrue(detect_language("/tmp/some_file.hack") == "Hack")
        self.assertTrue(detect_language("/tmp/some_file.hck") == "Hack")
        self.assertTrue(detect_language("/tmp/some_file.hhi") == "Hack")
        self.assertTrue(detect_language("/tmp/some_file.ml") == "OCaml")
        self.assertTrue(detect_language("/tmp/some_file.mli") == "OCaml")
        self.assertTrue(detect_language("/tmp/some_file.aj") == "AspectJ")
        self.assertTrue(detect_language("/tmp/some_file.sol") == "Solidity")
        self.assertTrue(detect_language("/tmp/some_file.fe") == "Fe")
        self.assertTrue(detect_language("/tmp/some_file.el") == "Emacs Lisp")
        self.assertTrue(detect_language("/tmp/some_file.thy") == "Isabelle")
        self.assertTrue(detect_language("/main/resources/application.toml") == "Configuration")
        self.assertTrue(detect_language("/tmp/some_file.po") == "Translation")
        self.assertTrue(detect_language("/tmp/some_file.tex") == "TeX")
        self.assertTrue(detect_language("/tmp/some_file.ros") == "Rosetta DSL")
        self.assertTrue(detect_language("/tmp/some_file.txt") == "Text")
        self.assertTrue(detect_language("/tmp/some_file.tpl") == "Smarty")

if __name__ == '__main__':
    unittest.main()